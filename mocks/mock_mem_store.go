// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ShvetsovYura/metrics-collector/internal/storage (interfaces: MemoryStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/ShvetsovYura/metrics-collector/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMemoryStore is a mock of MemoryStore interface.
type MockMemoryStore struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryStoreMockRecorder
}

// MockMemoryStoreMockRecorder is the mock recorder for MockMemoryStore.
type MockMemoryStoreMockRecorder struct {
	mock *MockMemoryStore
}

// NewMockMemoryStore creates a new mock instance.
func NewMockMemoryStore(ctrl *gomock.Controller) *MockMemoryStore {
	mock := &MockMemoryStore{ctrl: ctrl}
	mock.recorder = &MockMemoryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoryStore) EXPECT() *MockMemoryStoreMockRecorder {
	return m.recorder
}

// GetCounter mocks base method.
func (m *MockMemoryStore) GetCounter(arg0 context.Context, arg1 string) (models.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", arg0, arg1)
	ret0, _ := ret[0].(models.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockMemoryStoreMockRecorder) GetCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockMemoryStore)(nil).GetCounter), arg0, arg1)
}

// GetCounters mocks base method.
func (m *MockMemoryStore) GetCounters(arg0 context.Context) map[string]models.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounters", arg0)
	ret0, _ := ret[0].(map[string]models.Counter)
	return ret0
}

// GetCounters indicates an expected call of GetCounters.
func (mr *MockMemoryStoreMockRecorder) GetCounters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounters", reflect.TypeOf((*MockMemoryStore)(nil).GetCounters), arg0)
}

// GetGauge mocks base method.
func (m *MockMemoryStore) GetGauge(arg0 context.Context, arg1 string) (models.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", arg0, arg1)
	ret0, _ := ret[0].(models.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockMemoryStoreMockRecorder) GetGauge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockMemoryStore)(nil).GetGauge), arg0, arg1)
}

// GetGauges mocks base method.
func (m *MockMemoryStore) GetGauges(arg0 context.Context) map[string]models.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauges", arg0)
	ret0, _ := ret[0].(map[string]models.Gauge)
	return ret0
}

// GetGauges indicates an expected call of GetGauges.
func (mr *MockMemoryStoreMockRecorder) GetGauges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauges", reflect.TypeOf((*MockMemoryStore)(nil).GetGauges), arg0)
}

// SetCounter mocks base method.
func (m *MockMemoryStore) SetCounter(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCounter indicates an expected call of SetCounter.
func (mr *MockMemoryStoreMockRecorder) SetCounter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCounter", reflect.TypeOf((*MockMemoryStore)(nil).SetCounter), arg0, arg1, arg2)
}

// SetCounters mocks base method.
func (m *MockMemoryStore) SetCounters(arg0 context.Context, arg1 map[string]int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCounters", arg0, arg1)
}

// SetCounters indicates an expected call of SetCounters.
func (mr *MockMemoryStoreMockRecorder) SetCounters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCounters", reflect.TypeOf((*MockMemoryStore)(nil).SetCounters), arg0, arg1)
}

// SetGauge mocks base method.
func (m *MockMemoryStore) SetGauge(arg0 context.Context, arg1 string, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockMemoryStoreMockRecorder) SetGauge(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockMemoryStore)(nil).SetGauge), arg0, arg1, arg2)
}

// SetGauges mocks base method.
func (m *MockMemoryStore) SetGauges(arg0 context.Context, arg1 map[string]float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGauges", arg0, arg1)
}

// SetGauges indicates an expected call of SetGauges.
func (mr *MockMemoryStoreMockRecorder) SetGauges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauges", reflect.TypeOf((*MockMemoryStore)(nil).SetGauges), arg0, arg1)
}

// ToList mocks base method.
func (m *MockMemoryStore) ToList(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToList", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToList indicates an expected call of ToList.
func (mr *MockMemoryStoreMockRecorder) ToList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToList", reflect.TypeOf((*MockMemoryStore)(nil).ToList), arg0)
}
